import { Injectable } from '@nestjs/common';

import { PrismaService } from '../prisma/prisma.service';
import * as bcrypt from 'bcryptjs'; // Para encriptar contrase침as
import { JwtService } from '@nestjs/jwt'; // Para manejar JWT en NestJS
import { UnauthorizedException, HttpException, HttpStatus } from '@nestjs/common'; /* esta importaci칩n  permite manejar y mandar excepciones espec칤ficas de HTTP en un servidor NestJS, facilitando la gesti칩n de errores y el control de acceso. */

@Injectable()
export class AuthService {
  constructor(
    private readonly prismaService: PrismaService,
    private readonly jwtService: JwtService,
  ) {}

  async register(name: string, email: string, password: string) {
    try {
      console.log(' Registrando usuario:', { name, email, password });
  
      // Verificar si el usuario ya existe
      const existingUser = await this.prismaService.usuario.findUnique({
        where: { email },
      });
  
      if (existingUser) {
        console.log('丘멆잺 El usuario ya existe:', existingUser);
        throw new HttpException('El correo electr칩nico ya est치 en uso', HttpStatus.BAD_REQUEST);
      }
  
      console.log('游댐 Encriptando la contrase침a');
      const hashedPassword = await bcrypt.hash(password, 10);
      console.log('游댐 Contrase침a encriptada:', hashedPassword);
  
      // Creamos el usuario en la base de datos 
      const user = await this.prismaService.usuario.create({
        data: {
          nombre: name, // Mapeamos 'name' a 'nombre'
          email,
          contrase침a: hashedPassword,  // Mapeamos 'password' a 'contrase침a'
        },
      });
      console.log('Usuario creado correctamente:', user);

      // generamos el JWT
/*       cuando el usuario es creado en la base de datos (despu칠s de encriptar la contrase침a y 
verificar que no existe ya un usuario con el mismo correo electr칩nico), se genera un token JWT 
para ese nuevo usuario. Este token se devuelve junto con la informaci칩n b치sica del usuario.
Este token es utilizado para autenticar al usuario en futuras solicitudes, ya que es un mecanismo 
com칰n en APIs para mantener la sesi칩n activa.
 */      const payload = { userId: user.id };
      const token = this.jwtService.sign(payload, {
        secret: process.env.JWT_SECRET || 'clave_secreta',
        expiresIn: process.env.JWT_EXPIRES_IN || '1h',
      });
  
      return { user, token };

    } catch (error) {
      console.error('Error en register:', error);
      throw new HttpException(
        `Error al registrar usuario: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }
  // L칩gica de inicio de sesi칩n
  async login(email: string, password: string) {
    try {
      const user = await this.prismaService.usuario.findUnique({
        where: { email },
      });

      if (!user) {
        throw new UnauthorizedException('Usuario no encontrado');
      }

      // Comparar la contrase침a
      const isPasswordValid = await bcrypt.compare(password, user.contrase침a);

      if (!isPasswordValid) {
        throw new UnauthorizedException('Contrase침a incorrecta');
      }

      // Generar el token JWT 
      const payload = { userId: user.id }; // Datos que quieres incluir en el token
      const token = this.jwtService.sign(payload, {
        secret: process.env.JWT_SECRET || 'secreto', // Usar una variable de entorno para el secreto
        expiresIn: '1h', 
      });

      // Retornar el token y la informaci칩n b치sica del usuario
      return {
        token,
        user: {
          id: user.id,
          nombre: user.nombre,
          email: user.email,
        },
      };
    } catch (error) {
      console.log(error); 
      throw new HttpException('Error al iniciar sesi칩n', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
}
